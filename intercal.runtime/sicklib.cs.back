//This file is mostly auto-generated by compiling syslib.i.  It is
//hand-tweaked a bit, but can be regenerated by compiling syslib.i
//and copying the resulting C# into this file.  I've rolled it into
//Intercal.Runtime.dll simply to reduce the number of dlls needed for
//distribution.


using System;
using INTERCAL.Runtime;

/*

7.2 Available Functions
At the time of this writing, only the most fundamental operations are offered in the library, as a more complete selection would require prohibitive time and core to implement. These functions, along with their corresponding entry points (entered via DO (entry) NEXT) are listed below. 


(1000) .3 <- .1 plus .2, error exit on overflow 
(1009) .3 <- .1 plus .2 
.4 <- #1 if no overflow, else .4 <- #2 
(1010) .3 <- .1 minus .2, no action on overflow 
(1020) .1 <- .1 plus #1, no action on overflow 
(1030) .3 <- .1 times .2, error exit on overflow 
(1039) .3 <- .1 times .2 
.4 <- #1 if no overflow, else .4 <- #2 
(1040) .3 <- .1 divided by .2 
.3 <- #0 if .2 is #0 
(1050) .2 <- :1 divided by .1, error exit on overflow 
.2 <- #0 if .1 is #0

(1500) :3 <- :1 plus :2, error exit on overflow 
(1509) :3 <- :1 plus :2 
:4 <- #1 if no overflow, else :4 <- #2 
(1510) :3 <- :1 minus :2, no action on overflow 
(1520) :1 <- .1 concatenated with .2 
(1525) This subroutine is intended solely for internal use within the subroutine library and is therefore not described here. Its effect is to shift .3 logically 8 bits to the left. 
(1530) :1 <- .1 times .2 
(1540) :3 <- :1 times :2, error exit on overflow 
(1549) :3 <- :1 times :2 
:4 <- #1 if no overflow, else :4 <- #2 
(1550) :3 <- :1 divided by :2 
:3 <- #0 if :2 is #0

(1900) .1 <- uniform random no. from #0 to #65535 
(1910) .2 <- normal random no. from #0 to .1, with standard deviation .1 divided by #12 
 
*/

[assembly: EntryPoint("(1000)", "INTERCAL.Runtime.StandardLibrary", "DO_1000")]
[assembly: EntryPoint("(1009)", "INTERCAL.Runtime.StandardLibrary", "DO_1009")]
[assembly: EntryPoint("(1010)", "INTERCAL.Runtime.StandardLibrary", "DO_1010")]
[assembly: EntryPoint("(1020)", "INTERCAL.Runtime.StandardLibrary", "DO_1020")]
[assembly: EntryPoint("(1030)", "INTERCAL.Runtime.StandardLibrary", "DO_1030")]
[assembly: EntryPoint("(1039)", "INTERCAL.Runtime.StandardLibrary", "DO_1039")]
[assembly: EntryPoint("(1040)", "INTERCAL.Runtime.StandardLibrary", "DO_1040")]
[assembly: EntryPoint("(1050)", "INTERCAL.Runtime.StandardLibrary", "DO_1050")]
[assembly: EntryPoint("(1500)", "INTERCAL.Runtime.StandardLibrary", "DO_1500")]
[assembly: EntryPoint("(1509)", "INTERCAL.Runtime.StandardLibrary", "DO_1509")]
[assembly: EntryPoint("(1510)", "INTERCAL.Runtime.StandardLibrary", "DO_1510")]
[assembly: EntryPoint("(1520)", "INTERCAL.Runtime.StandardLibrary", "DO_1520")]
[assembly: EntryPoint("(1525)", "INTERCAL.Runtime.StandardLibrary", "DO_1525")]
[assembly: EntryPoint("(1530)", "INTERCAL.Runtime.StandardLibrary", "DO_1530")]
[assembly: EntryPoint("(1540)", "INTERCAL.Runtime.StandardLibrary", "DO_1540")]
[assembly: EntryPoint("(1549)", "INTERCAL.Runtime.StandardLibrary", "DO_1549")]
[assembly: EntryPoint("(1550)", "INTERCAL.Runtime.StandardLibrary", "DO_1550")]
[assembly: EntryPoint("(1900)", "INTERCAL.Runtime.StandardLibrary", "DO_1900")]
[assembly: EntryPoint("(1910)", "INTERCAL.Runtime.StandardLibrary", "DO_1910")]


namespace INTERCAL
{
	namespace Runtime
	{
		public class StandardLibrary : MarshalByRefObject
		{ 
			public void DO_1000(ref IExecutionContext ctx)
			{
				Eval(ref ctx,0, 0);
			}

			public void DO_1009(ref IExecutionContext ctx)
			{
				Eval(ref ctx,2, 0);
			}

			public void DO_1010(ref IExecutionContext ctx)
			{
				Eval(ref ctx,26, 0);
			}

			public void DO_1020(ref IExecutionContext ctx)
			{
				Eval(ref ctx,34, 0);
			}

			public void DO_1030(ref IExecutionContext ctx)
			{
				Eval(ref ctx,47, 0);
			}

			public void DO_1039(ref IExecutionContext ctx)
			{
				Eval(ref ctx,49, 0);
			}

			public void DO_1040(ref IExecutionContext ctx)
			{
				Eval(ref ctx,63, 0);
			}

			public void DO_1050(ref IExecutionContext ctx)
			{
				Eval(ref ctx,77, 0);
			}

			public void DO_1500(ref IExecutionContext ctx)
			{
				Eval(ref ctx,88, 0);
			}

			public void DO_1509(ref IExecutionContext ctx)
			{
				Eval(ref ctx,90, 0);
			}

			public void DO_1510(ref IExecutionContext ctx)
			{
				Eval(ref ctx,121, 0);
			}

			public void DO_1520(ref IExecutionContext ctx)
			{
				Eval(ref ctx,130, 0);
			}

			public void DO_1525(ref IExecutionContext ctx)
			{
				Eval(ref ctx,139, 0);
			}

			public void DO_1530(ref IExecutionContext ctx)
			{
				Eval(ref ctx,141, 0);
			}

			public void DO_1540(ref IExecutionContext ctx)
			{
				Eval(ref ctx,162, 0);
			}

			public void DO_1549(ref IExecutionContext ctx)
			{
				Eval(ref ctx,164, 0);
			}

			public void DO_1550(ref IExecutionContext ctx)
			{
				Eval(ref ctx,204, 0);
			}

			public void DO_1900(ref IExecutionContext ctx)
			{
				Eval(ref ctx,236, 0);
			}

			public void DO_1910(ref IExecutionContext ctx)
			{
				Eval(ref ctx,249, 0);
			}

			public void DO(ref IExecutionContext ctx, string label)
			{
				switch(label)
				{
					case "(1000)": Eval(ref ctx,0, 0); break;
					case "(1009)": Eval(ref ctx,2, 0); break;
					case "(1010)": Eval(ref ctx,26, 0); break;
					case "(1020)": Eval(ref ctx,34, 0); break;
					case "(1030)": Eval(ref ctx,47, 0); break;
					case "(1039)": Eval(ref ctx,49, 0); break;
					case "(1040)": Eval(ref ctx,63, 0); break;
					case "(1050)": Eval(ref ctx,77, 0); break;
					case "(1500)": Eval(ref ctx,88, 0); break;
					case "(1509)": Eval(ref ctx,90, 0); break;
					case "(1510)": Eval(ref ctx,121, 0); break;
					case "(1520)": Eval(ref ctx,130, 0); break;
					case "(1525)": Eval(ref ctx,139, 0); break;
					case "(1530)": Eval(ref ctx,141, 0); break;
					case "(1540)": Eval(ref ctx,162, 0); break;
					case "(1549)": Eval(ref ctx,164, 0); break;
					case "(1550)": Eval(ref ctx,204, 0); break;
					case "(1900)": Eval(ref ctx,236, 0); break;
					case "(1910)": Eval(ref ctx,249, 0); break;
				}
			}

			bool[] abstainMap = new bool[] {true,true,true,true,true,true,true};

			protected uint Eval(ref IExecutionContext ctx, int label, uint depth)
			{
				if(depth > 79) { Lib.Fail(Messages.E123); }
				uint nest = 0;
				uint forget  = 0;
				switch(label)
				{
					case 0: goto label_1000;
					case 2: goto label_1009;
					case 5: goto label_1004;
					case 11: goto label_1005;
					case 12: goto label_1999;
					case 13: goto label_1002;
					case 14: goto label_1006;
					case 20: goto label_1003;
					case 22: goto label_1007;
					case 25: goto label_1001;
					case 26: goto label_1010;
					case 34: goto label_1020;
					case 37: goto label_1021;
					case 43: goto label_1023;
					case 44: goto label_1022;
					case 47: goto label_1030;
					case 49: goto label_1039;
					case 55: goto label_1032;
					case 57: goto label_1031;
					case 58: goto label_1033;
					case 63: goto label_1040;
					case 77: goto label_1050;
					case 84: goto label_1051;
					case 88: goto label_1500;
					case 90: goto label_1509;
					case 106: goto label_1504;
					case 107: goto label_1503;
					case 108: goto label_1501;
					case 111: goto label_1506;
					case 113: goto label_1505;
					case 114: goto label_1502;
					case 121: goto label_1510;
					case 130: goto label_1520;
					case 139: goto label_1525;
					case 141: goto label_1530;
					case 146: goto label_1535;
					case 152: goto label_1531;
					case 153: goto label_1533;
					case 159: goto label_1532;
					case 162: goto label_1540;
					case 164: goto label_1549;
					case 195: goto label_1541;
					case 197: goto label_1542;
					case 199: goto label_1543;
					case 200: goto label_1544;
					case 204: goto label_1550;
					case 210: goto label_1553;
					case 216: goto label_1552;
					case 217: goto label_1556;
					case 226: goto label_1554;
					case 227: goto label_1555;
					case 233: goto label_1551;
					case 236: goto label_1900;
					case 240: goto label_1901;
					case 246: goto label_1902;
					case 249: goto label_1910;
					case 253: goto label_1912;
					case 254: goto label_1911;
				}


				label_1000: 
					ctx.Ignore(".4");
				abstainMap[0] = false;

				label_1009: 
					ctx.Stash(".1");
				ctx.Stash(".2");
				ctx.Stash(".5");
				ctx.Stash(".6");
				ctx[".4"] = 1;
				nest = this.Eval(ref ctx,5,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1004: 
					forget += 1;
				ctx[".3"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(ctx[".1"]), (ushort)(ctx[".2"])))),1431655765);
				ctx[".6"] = (uint)Lib.Select((Lib.And(Lib.Mingle((ushort)(ctx[".1"]), (ushort)(ctx[".2"])))),1431655765);
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[".6"],32768))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,13,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".4"] = 2;

				label_1005: 
					if(abstainMap[0])
					{
						nest = this.Eval(ref ctx,14,depth-forget+1);
						if(nest == UInt32.MaxValue)
							return UInt32.MaxValue;
						else if(nest > 0)
							return nest+forget-1;
					}


				label_1999: 
					Lib.Fail("(1999) * DOUBLE OR SINGLE PRECISION OVERFLOW");

				label_1002: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1006: 
					forget += 1;
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[".6"],ctx[".6"])),1))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,20,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".1"] = ctx[".3"];
				ctx[".2"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".6"]), (ushort)(0))),715827883);
				nest = this.Eval(ref ctx,5,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1003: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				abstainMap[0] = true;

				label_1007: 
					ctx.Retrieve(".1");
				ctx.Retrieve(".2");
				ctx.Retrieve(".5");
				ctx.Retrieve(".6");
				ctx.Remember(".4");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1001: 
				{
					uint retval = (ctx[".5"])+ forget;
					if(retval == 0)
						throw new IntercalException(Messages.E621);
					else
						return retval-1;
				}


				label_1010: 
					ctx.Stash(".1");
				ctx.Stash(".2");
				ctx.Stash(".4");
				ctx[".4"] = ctx[".1"];
				ctx[".1"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(ctx[".2"]), (ushort)(65535)))),1431655765);
				nest = this.Eval(ref ctx,34,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".2"] = ctx[".4"];
				nest = this.Eval(ref ctx,2,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(".1");
				ctx.Retrieve(".2");
				ctx.Retrieve(".4");
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1020: 
					ctx.Stash(".2");
				ctx.Stash(".3");
				ctx[".2"] = 1;
				nest = this.Eval(ref ctx,37,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1021: 
					forget += 1;
				ctx[".3"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[".1"],ctx[".2"]))), (ushort)(1)))),3);
				ctx[".1"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(ctx[".1"]), (ushort)(ctx[".2"])))),1431655765);
				nest = this.Eval(ref ctx,44,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".2"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".2"]), (ushort)(0))),715827883);
				nest = this.Eval(ref ctx,37,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1023: 
				{
					uint retval = (ctx[".3"])+ forget;
					if(retval == 0)
						throw new IntercalException(Messages.E621);
					else
						return retval-1;
				}


				label_1022: 
					nest = this.Eval(ref ctx,43,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(".2");
				ctx.Retrieve(".3");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1030: 
					abstainMap[2] = false;
				abstainMap[1] = false;

				label_1039: 
					ctx.Stash(":1");
				ctx.Stash(".5");
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".3"] = (uint)Lib.Select(ctx[":1"],65535);
				ctx[".5"] = (uint)Lib.Select(ctx[":1"],4294901760);
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[".5"],ctx[".5"])),1))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,57,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1032: 
					if(abstainMap[1])
					{
						nest = this.Eval(ref ctx,58,depth-forget+1);
						if(nest == UInt32.MaxValue)
							return UInt32.MaxValue;
						else if(nest > 0)
							return nest+forget-1;
					}

				nest = this.Eval(ref ctx,12,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1031: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1033: 
					if(abstainMap[2])
					{
						ctx[".4"] = ctx[".5"];
					}

				abstainMap[1] = true;
				abstainMap[2] = true;
				ctx.Retrieve(":1");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1040: 
					ctx.Stash(".1");
				ctx.Stash(".2");
				ctx.Stash(".2");
				ctx.Stash(":1");
				ctx.Stash(":2");
				ctx.Stash(":3");
				ctx[".2"] = 0;
				nest = this.Eval(ref ctx,130,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Stash(":1");
				ctx.Retrieve(".2");
				ctx[".1"] = ctx[".2"];
				ctx[".2"] = 0;
				nest = this.Eval(ref ctx,130,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = ctx[":1"];
				ctx.Retrieve(".1");
				ctx.Retrieve(".2");
				ctx.Retrieve(":1");
				nest = this.Eval(ref ctx,204,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".3"] = ctx[":3"];
				ctx.Retrieve(":1");
				ctx.Retrieve(":2");
				ctx.Retrieve(":3");
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1050: 
					ctx.Stash(":2");
				ctx.Stash(":3");
				ctx.Stash(".5");
				ctx[":2"] = ctx[".1"];
				nest = this.Eval(ref ctx,204,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".5"] = (uint)Lib.Select(ctx[":3"],4294901760);
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[".5"],ctx[".5"])),1))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,84,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				nest = this.Eval(ref ctx,12,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1051: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".2"] = ctx[":3"];
				ctx.Retrieve(":2");
				ctx.Retrieve(":3");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1500: 
					abstainMap[4] = false;
				abstainMap[3] = false;

				label_1509: 
					ctx.Stash(":1");
				ctx.Stash(".1");
				ctx.Stash(".2");
				ctx.Stash(".3");
				ctx.Stash(".4");
				ctx.Stash(".5");
				ctx.Stash(".6");
				ctx[".1"] = (uint)Lib.Select(ctx[":1"],65535);
				ctx[".2"] = (uint)Lib.Select(ctx[":2"],65535);
				nest = this.Eval(ref ctx,2,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".5"] = ctx[".3"];
				ctx[".6"] = ctx[".4"];
				ctx[".1"] = (uint)Lib.Select(ctx[":1"],4294901760);
				ctx[".2"] = (uint)Lib.Select(ctx[":2"],4294901760);
				nest = this.Eval(ref ctx,2,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".1"] = ctx[".3"];
				nest = this.Eval(ref ctx,107,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".6"] = ctx[".4"];
				ctx[".2"] = 1;
				nest = this.Eval(ref ctx,2,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".1"] = ctx[".3"];
				nest = this.Eval(ref ctx,108,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1504: 
				{
					uint retval = (ctx[".6"])+ forget;
					if(retval == 0)
						throw new IntercalException(Messages.E621);
					else
						return retval-1;
				}


				label_1503: 
					nest = this.Eval(ref ctx,106,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1501: 
					ctx[".2"] = ctx[".5"];
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select((Lib.And(Lib.Mingle((ushort)(ctx[".6"]), (ushort)(ctx[".4"])))),1))), (ushort)(2)))),3);
				nest = this.Eval(ref ctx,113,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1506: 
					if(abstainMap[3])
					{
						nest = this.Eval(ref ctx,114,depth-forget+1);
						if(nest == UInt32.MaxValue)
							return UInt32.MaxValue;
						else if(nest > 0)
							return nest+forget-1;
					}

				nest = this.Eval(ref ctx,12,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1505: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1502: 
					if(abstainMap[4])
					{
						ctx[":4"] = ctx[".5"];
					}

				nest = this.Eval(ref ctx,130,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":3"] = ctx[":1"];
				ctx.Retrieve(":1");
				ctx.Retrieve(".1");
				ctx.Retrieve(".2");
				ctx.Retrieve(".3");
				ctx.Retrieve(".4");
				ctx.Retrieve(".5");
				ctx.Retrieve(".6");
				abstainMap[4] = true;
				abstainMap[3] = true;
			{
				uint retval = (3)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1510: 
					ctx.Stash(":1");
				ctx.Stash(":2");
				ctx.Stash(":4");
				ctx[":1"] = Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],2863311530))), (ushort)(65535)))),1431655765))), (ushort)(((uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],1431655765))), (ushort)(65535)))),1431655765))));
				ctx[":2"] = 1;
				nest = this.Eval(ref ctx,90,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(":1");
				ctx[":2"] = ctx[":3"];
				nest = this.Eval(ref ctx,90,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(":2");
				ctx.Retrieve(":4");
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1520: 
					ctx.Stash(".3");
				ctx.Stash(".4");
				ctx[".3"] = (uint)Lib.Select(ctx[".1"],43690);
				nest = this.Eval(ref ctx,139,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".4"] = (uint)Lib.Select((Lib.Or(Lib.Mingle((ushort)(ctx[".3"]), (ushort)(((uint)Lib.Select(ctx[".2"],43690)))))),1431655765);
				ctx[".3"] = (uint)Lib.Select(ctx[".1"],21845);
				nest = this.Eval(ref ctx,139,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":1"] = Lib.Mingle((ushort)(ctx[".4"]), (ushort)(((uint)Lib.Select((Lib.Or(Lib.Mingle((ushort)(ctx[".3"]), (ushort)(((uint)Lib.Select(ctx[".2"],21845)))))),1431655765))));
				ctx.Retrieve(".3");
				ctx.Retrieve(".4");
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1525: 
					ctx[".3"] = (uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(ctx[".3"]), (ushort)(0))),715827883))), (ushort)(0))),715827883))), (ushort)(0))),178956975))), (ushort)(0))),11184895);
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1530: 
					ctx.Stash(":2");
				ctx.Stash(":3");
				ctx.Stash(".3");
				ctx.Stash(".5");
				ctx[":1"] = 0;
				ctx[":2"] = ctx[".2"];
				ctx[".3"] = 1;
				nest = this.Eval(ref ctx,146,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1535: 
					forget += 1;
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[".1"],ctx[".3"]))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,152,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				nest = this.Eval(ref ctx,88,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":1"] = ctx[":3"];
				nest = this.Eval(ref ctx,153,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1531: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1533: 
					forget += 1;
				ctx[".3"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".3"]), (ushort)(0))),715827883);
				ctx[":2"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],1431655765))), (ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],715827882))), (ushort)(0))),715827883))));
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[".3"],ctx[".3"]))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,159,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				nest = this.Eval(ref ctx,146,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1532: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(":2");
				ctx.Retrieve(":3");
				ctx.Retrieve(".3");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1540: 
					abstainMap[5] = false;
				abstainMap[6] = false;

				label_1549: 
					ctx.Stash(":1");
				ctx.Stash(":2");
				ctx.Stash(":4");
				ctx.Stash(":5");
				ctx.Stash(".1");
				ctx.Stash(".2");
				ctx.Stash(".5");
				ctx[".1"] = (uint)Lib.Select(ctx[":1"],65535);
				ctx[".2"] = (uint)Lib.Select(ctx[":2"],4294901760);
				ctx[".5"] = (uint)Lib.Select(ctx[":1"],4294901760);
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":3"] = ctx[":1"];
				ctx[".2"] = (uint)Lib.Select(ctx[":2"],65535);
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":5"] = ctx[":1"];
				ctx[".1"] = ctx[".5"];
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":4"] = ctx[":1"];
				ctx[":1"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":3"],4294901760))), (ushort)(((uint)Lib.Select(ctx[":4"],4294901760))));
				ctx[".5"] = (uint)Lib.Select(((uint)Lib.Select(ctx[":1"],ctx[":1"])),1);
				ctx[".2"] = (uint)Lib.Select(ctx[":2"],4294901760);
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".5"] = (uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[":1"],ctx[":1"])),1))), (ushort)(ctx[".5"]))),3);
				ctx[".1"] = (uint)Lib.Select(ctx[":3"],65535);
				ctx[".2"] = 0;
				nest = this.Eval(ref ctx,130,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = ctx[":1"];
				ctx[".1"] = (uint)Lib.Select(ctx[":4"],65535);
				nest = this.Eval(ref ctx,130,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				nest = this.Eval(ref ctx,90,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".5"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".5"]), (ushort)(((uint)Lib.Select(ctx[":4"],3))))),15);
				ctx[":1"] = ctx[":3"];
				ctx[":2"] = ctx[":5"];
				nest = this.Eval(ref ctx,90,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".5"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".5"]), (ushort)(((uint)Lib.Select(ctx[":4"],3))))),172);
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[".5"],ctx[".5"])),1))), (ushort)(1)))),3);
				ctx.Retrieve(":4");

				label_1541: 
					if(abstainMap[5])
					{
						ctx[":4"] = ctx[".5"];
					}

				nest = this.Eval(ref ctx,199,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1542: 
					if(abstainMap[6])
					{
						nest = this.Eval(ref ctx,200,depth-forget+1);
						if(nest == UInt32.MaxValue)
							return UInt32.MaxValue;
						else if(nest > 0)
							return nest+forget-1;
					}

				nest = this.Eval(ref ctx,12,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1543: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1544: 
					abstainMap[5] = true;
				abstainMap[6] = true;
				ctx.Retrieve(":1");
				ctx.Retrieve(":2");
				ctx.Retrieve(":5");
				ctx.Retrieve(".1");
				ctx.Retrieve(".2");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1550: 
					ctx.Stash(":1");
				ctx.Stash(":4");
				ctx.Stash(":5");
				ctx.Stash(".5");
				ctx[":3"] = 0;
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[":2"],ctx[":2"])),1))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,233,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":4"] = 1;
				nest = this.Eval(ref ctx,210,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1553: 
					forget += 1;
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],2147483648))), (ushort)(2)))),3);
				nest = this.Eval(ref ctx,216,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],1431655765))), (ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],715827882))), (ushort)(0))),715827883))));
				ctx[":4"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],1431655765))), (ushort)(((uint)Lib.Select((Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],715827882))), (ushort)(0))),715827883))));
				nest = this.Eval(ref ctx,210,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1552: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1556: 
					forget += 1;
				ctx[":5"] = Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":1"],2863311530))), (ushort)(((uint)Lib.Select(ctx[":2"],2863311530)))))),1431655765))), (ushort)(((uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":1"],1431655765))), (ushort)(((uint)Lib.Select(ctx[":2"],1431655765)))))),1431655765))));
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select((Lib.And(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[":2"],ctx[":5"])),(Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Xor((uint)Lib.Select(((uint)Lib.Select(ctx[":5"],ctx[":5"])),4294967295))),2863311530))), (ushort)(32768)))),1431655765))), (ushort)(((uint)Lib.Select((Lib.Xor((uint)Lib.Select(((uint)Lib.Select(ctx[":5"],ctx[":5"])),4294967295))),1431655765)))))))), (ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[":5"],ctx[":5"])),1)))))),1))), (ushort)(2)))),3);
				nest = this.Eval(ref ctx,226,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":5"] = ctx[":3"];
				nest = this.Eval(ref ctx,121,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":1"] = ctx[":3"];
				ctx[":3"] = Lib.Mingle((ushort)(((uint)Lib.Select((Lib.Or(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],2863311530))), (ushort)(((uint)Lib.Select(ctx[":5"],2863311530)))))),1431655765))), (ushort)(((uint)Lib.Select((Lib.Or(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],1431655765))), (ushort)(((uint)Lib.Select(ctx[":5"],1431655765)))))),1431655765))));
				nest = this.Eval(ref ctx,227,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1554: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1555: 
					forget += 1;
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],1))), (ushort)(2)))),3);
				nest = this.Eval(ref ctx,233,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":2"],1431655764))), (ushort)(((uint)Lib.Select(ctx[":2"],2863311530))));
				ctx[":4"] = Lib.Mingle((ushort)(((uint)Lib.Select(ctx[":4"],1431655764))), (ushort)(((uint)Lib.Select(ctx[":4"],2863311530))));
				nest = this.Eval(ref ctx,217,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1551: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(":1");
				ctx.Retrieve(":4");
				ctx.Retrieve(":5");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1900: 
					ctx.Stash(".2");
				ctx.Stash(".3");
				ctx.Stash(".5");
				ctx[".1"] = 0;
				ctx[".2"] = 1;
				nest = this.Eval(ref ctx,240,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1901: 
					forget += 1;
				if(Lib.Rand(100)  < 50)
				{
					ctx[".1"] = (uint)Lib.Select((Lib.Or(Lib.Mingle((ushort)(ctx[".1"]), (ushort)(ctx[".2"])))),1431655765);
				}

				ctx[".2"] = (uint)Lib.Select((Lib.Mingle((ushort)(ctx[".2"]), (ushort)(0))),715827883);
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(ctx[".2"],ctx[".2"]))), (ushort)(1)))),3);
				nest = this.Eval(ref ctx,246,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				nest = this.Eval(ref ctx,240,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1902: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(".2");
				ctx.Retrieve(".3");
				ctx.Retrieve(".5");
			{
				uint retval = (2)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


				label_1910: 
					ctx.Stash(".1");
				ctx.Stash(".3");
				ctx.Stash(".5");
				ctx.Stash(":1");
				ctx.Stash(":2");
				ctx.Stash(":3");
				ctx[".3"] = 65524;
				ctx[":1"] = 6;
				nest = this.Eval(ref ctx,254,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1912: 
					nest = this.Eval(ref ctx,25,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;

				label_1911: 
					forget += 1;
				nest = this.Eval(ref ctx,236,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = ctx[".1"];
				nest = this.Eval(ref ctx,88,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":1"] = ctx[":3"];
				ctx[".1"] = ctx[".3"];
				nest = this.Eval(ref ctx,34,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".3"] = ctx[".1"];
				ctx[".5"] = (uint)Lib.Select((Lib.Xor(Lib.Mingle((ushort)(((uint)Lib.Select(((uint)Lib.Select(ctx[".3"],ctx[".3"])),1))), (ushort)(2)))),3);
				nest = this.Eval(ref ctx,253,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".1"] = 12;
				nest = this.Eval(ref ctx,77,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx.Retrieve(".1");
				nest = this.Eval(ref ctx,141,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[":2"] = 32768;
				nest = this.Eval(ref ctx,88,depth-forget+1);
				if(nest == UInt32.MaxValue)
					return UInt32.MaxValue;
				else if(nest > 0)
					return nest+forget-1;
				ctx[".2"] = (uint)Lib.Select(ctx[":3"],4294901760);
				ctx.Retrieve(".3");
				ctx.Retrieve(".5");
				ctx.Retrieve(":1");
				ctx.Retrieve(":2");
				ctx.Retrieve(":3");
			{
				uint retval = (1)+ forget;
				if(retval == 0)
					throw new IntercalException(Messages.E621);
				else
					return retval-1;
			}


			}
		}
	}
}
